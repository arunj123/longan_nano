/*!
    \file    usbd_descriptors.h
    \brief   Header file for USB composite device descriptors

    \version 2025-02-10, firmware for GD32VF103
*/

#ifndef USBD_DESCRIPTORS_H
#define USBD_DESCRIPTORS_H

extern "C" {
    #include "usbd_core.h"
}

#include "usb_types.h"

/* Combined Standard HID Report Descriptor (Mouse + Keyboard + Consumer) */
const uint8_t std_hid_report_descriptor[] = {
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x85, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, 
    0x29, 0x03, 0x15, 0x00, 0x25, 0x01, 0x95, 0x03, 0x75, 0x01, 0x81, 0x02, 0x95, 0x01, 0x75, 0x05, 0x81, 0x01, 
    0x05, 0x01, 0x09, 0x30, 0x09, 0x31, 0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x02, 0x81, 0x06, 0xC0, 0xC0, 
    0x05, 0x01, 0x09, 0x06, 0xA1, 0x01, 0x85, 0x02, 0x05, 0x07, 0x19, 0xE0, 0x29, 0xE7, 0x15, 0x00, 
    0x25, 0x01, 0x75, 0x01, 0x95, 0x08, 0x81, 0x02, 0x95, 0x01, 0x75, 0x08, 0x81, 0x01, 0x95, 0x06, 0x75, 0x08, 
    0x15, 0x00, 0x25, 0x65, 0x05, 0x07, 0x19, 0x00, 0x29, 0x65, 0x81, 0x00, 0xC0, 0x05, 0x0C, 0x09, 0x01, 0xA1, 
    0x01, 0x85, 0x03, 0x19, 0x00, 0x2A, 0x3C, 0x02, 0x15, 0x00, 0x26, 0x3C, 0x02, 0x95, 0x01, 0x75, 
    0x10, 0x81, 0x00, 0xC0
};

/* Custom HID Report Descriptor */
const uint8_t custom_hid_report_descriptor[] = {
    0x06, 0x00, 0xFF, 0x09, 0x00, 0xA1, 0x01, 0x85, 0x11, 0x09, 0x01, 0x15, 0x00, 0x25, 0x01, 0x75, 
    0x08, 0x95, 0x01, 0x91, 0x82, 0x85, 0x12, 0x09, 0x02, 0x15, 0x00, 0x25, 0x01, 0x75, 0x08, 0x95, 
    0x01, 0x91, 0x82, 0x85, 0x13, 0x09, 0x03, 0x15, 0x00, 0x25, 0x01, 0x75, 0x08, 0x95, 0x01, 0x91, 
    0x82, 0x85, 0x14, 0x09, 0x04, 0x15, 0x00, 0x25, 0x01, 0x75, 0x08, 0x95, 0x01, 0x91, 0x82, 0x85, 
    0x15, 0x09, 0x05, 0x15, 0x00, 0x25, 0x01, 0x75, 0x01, 0x81, 0x02, 0x75, 0x07, 0x81, 0x03, 0x85, 
    0x16, 0x09, 0x06, 0x15, 0x00, 0x25, 0x01, 0x75, 0x01, 0x81, 0x02, 0x75, 0x07, 0x81, 0x03, 0xC0
};

/* Report descriptor lengths - LET THE COMPILER CALCULATE THE SIZE! */
#define STD_HID_REPORT_DESC_LEN       sizeof(std_hid_report_descriptor)
#define CUSTOM_HID_REPORT_DESC_LEN    sizeof(custom_hid_report_descriptor)

/* Total size of the composite descriptor */
#define COMPOSITE_CONFIG_DESC_SIZE    (sizeof(usb_desc_config) + \
                                       sizeof(usb_desc_itf) + sizeof(usb::hid::DescHid) + sizeof(usb_desc_ep) + \
                                       sizeof(usb_desc_itf) + sizeof(usb::hid::DescHid) + sizeof(usb_desc_ep) * 2 + \
                                       sizeof(usb_desc_itf) + sizeof(usb_desc_ep) * 2)

/* Report IDs */
#define REPORT_ID_MOUSE             1U
#define REPORT_ID_KEYBOARD          2U
#define REPORT_ID_CONSUMER          3U

/* Composite descriptor structure */
typedef struct
{
    usb_desc_config         config;

    /* Standard HID (Mouse, Keyboard, Consumer) Interface */
    usb_desc_itf            std_hid_itf;
    usb::hid::DescHid       std_hid_desc;
    usb_desc_ep             std_hid_epin;

    /* Custom HID Interface */
    usb_desc_itf            custom_hid_itf;
    usb::hid::DescHid       custom_hid_desc;
    usb_desc_ep             custom_hid_epin;
    usb_desc_ep             custom_hid_epout;

    /* MSC Interface */
    usb_desc_itf            msc_itf;
    usb_desc_ep             msc_epout;
    usb_desc_ep             msc_epin;
} usb_composite_desc_config_set;

extern const usb_desc_dev composite_dev_desc;
extern const usb_composite_desc_config_set composite_config_desc;
extern void *const usbd_composite_strings[];

#endif /* USBD_DESCRIPTORS_H */